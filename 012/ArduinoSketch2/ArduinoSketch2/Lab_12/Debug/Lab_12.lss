
Lab_12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c84  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000718  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028d  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
#include <Arduino.h>



void setup() {
	cli(); // заборона переривань, щоб на таймер не відволікався МК
  90:	f8 94       	cli

	// Кожен біт регістру DDR (розмір регістру 8 біт, тобто 1 байт) відповідає за стан піна МК
	// якщо біт регістру DDR дорівнює 1, то пін МК працює як вихід і до нього можна підключати світлодіод
	// якщо біт регістру DDR дорівнює 0, то пін МК працює як вхід і до нього можна підключати кнопку
	DDRB |= (1 << PB5);              // 0010 0000 //Arduino Uno: pin 13
  92:	25 9a       	sbi	0x04, 5	; 4
	DDRC |= (1 << PC1) | (1 << PC5); // 0010 0010 //Arduino Uno: A1, A5
  94:	87 b1       	in	r24, 0x07	; 7
  96:	82 62       	ori	r24, 0x22	; 34
  98:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD3) | (1 << PD7); // 1000 1000 //Arduino Uno: pin 3, pin 7
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	88 68       	ori	r24, 0x88	; 136
  9e:	8a b9       	out	0x0a, r24	; 10
	// якщо біт регістру PORT дорівнює 1 (при цьому той самий біт у регістрі DDR теж дорівнює 1), то на пін МК подається +5В і світлодіод світиться
	// якщо біт регістру PORT дорівнює 0 (при цьому той самий біт у регістрі DDR теж дорівнює 1), то на пін МК подається 0В і світлодіод не світиться
	// але
	// якщо біт регістру PORT дорівнює 1 (при цьому той самий біт у регістрі DDR дорівнює 0), то відбувається підтяжка піна МК до +5В, коли кнопка не натиснута
	// якщо біт регістру PORT дорівнює 0 (при цьому той самий біт у регістрі DDR дорівнює 0), то на пін МК подається 0В, коли кнопка не натиснута
	PORTB |= (1 << PB4);              // 0001 0000 //Arduino Uno: pin 12
  a0:	2c 9a       	sbi	0x05, 4	; 5
	PORTC |= (1 << PC0) | (1 << PC4); // 0001 0001 //Arduino Uno: A0, A4
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	81 61       	ori	r24, 0x11	; 17
  a6:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PD2) | (1 << PD6); // 0100 0100 //Arduino Uno: pin 2, pin 6
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	84 64       	ori	r24, 0x44	; 68
  ac:	8b b9       	out	0x0b, r24	; 11

	sei(); // дозвіл переривань
  ae:	78 94       	sei
	// Кожен біт регістру PIN (розмір регістру 8 біт, тобто 1 байт) зберігає в собі значення, яке подається на пін МК ззовні
	// працювати з бітом регістру PIN є сенс коли той самий біт з регістру DDR встановлено в 0 (пін МК працює як вхід)
	// при цьому, в залежності від способу підключення кнопки до піна МК, відповідний біт регістру PORT встановлено в 0 або 1
	while (1) // нескінчений цикл
	{
		asm("cli");
  b0:	f8 94       	cli
		(PINB & (1 << PB4)) != 0   ?   PORTB |= 1 << PB5   :   PORTB &= ~(1 << PB5);
  b2:	1c 9b       	sbis	0x03, 4	; 3
  b4:	02 c0       	rjmp	.+4      	; 0xba <setup+0x2a>
  b6:	2d 9a       	sbi	0x05, 5	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <setup+0x2c>
  ba:	2d 98       	cbi	0x05, 5	; 5

		(PINC & (1 << PC0)) != 0   ?   PORTC |= 1 << PC1   :   PORTC &= ~(1 << PC1);
  bc:	30 9b       	sbis	0x06, 0	; 6
  be:	02 c0       	rjmp	.+4      	; 0xc4 <setup+0x34>
  c0:	41 9a       	sbi	0x08, 1	; 8
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <setup+0x36>
  c4:	41 98       	cbi	0x08, 1	; 8
		(PINC & (1 << PC4)) != 0   ?   PORTC |= 1 << PC5   :   PORTC &= ~(1 << PC5);
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	02 c0       	rjmp	.+4      	; 0xce <setup+0x3e>
  ca:	45 9a       	sbi	0x08, 5	; 8
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <setup+0x40>
  ce:	45 98       	cbi	0x08, 5	; 8

		(PIND & (1 << PD2)) != 0   ?   PORTD |= 1 << PD3   :   PORTD &= ~(1 << PD3);
  d0:	4a 9b       	sbis	0x09, 2	; 9
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <setup+0x48>
  d4:	5b 9a       	sbi	0x0b, 3	; 11
  d6:	01 c0       	rjmp	.+2      	; 0xda <setup+0x4a>
  d8:	5b 98       	cbi	0x0b, 3	; 11
		(PIND & (1 << PD6)) != 0   ?   PORTD |= 1 << PD7   :   PORTD &= ~(1 << PD7);
  da:	4e 9b       	sbis	0x09, 6	; 9
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <setup+0x52>
  de:	5f 9a       	sbi	0x0b, 7	; 11
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <setup+0x54>
  e2:	5f 98       	cbi	0x0b, 7	; 11
		asm("sei");
  e4:	78 94       	sei
	sei(); // дозвіл переривань

	// Кожен біт регістру PIN (розмір регістру 8 біт, тобто 1 байт) зберігає в собі значення, яке подається на пін МК ззовні
	// працювати з бітом регістру PIN є сенс коли той самий біт з регістру DDR встановлено в 0 (пін МК працює як вхід)
	// при цьому, в залежності від способу підключення кнопки до піна МК, відповідний біт регістру PORT встановлено в 0 або 1
	while (1) // нескінчений цикл
  e6:	e4 cf       	rjmp	.-56     	; 0xb0 <setup+0x20>

000000e8 <loop>:
		(PIND & (1 << PD6)) != 0   ?   PORTD |= 1 << PD7   :   PORTD &= ~(1 << PD7);
		asm("sei");
	}
}

void loop() {
  e8:	08 95       	ret

000000ea <initVariant>:
  ea:	08 95       	ret

000000ec <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
  ec:	0e 94 cf 00 	call	0x19e	; 0x19e <init>

	initVariant();
  f0:	0e 94 75 00 	call	0xea	; 0xea <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  f4:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  fc:	0e 94 74 00 	call	0xe8	; 0xe8 <loop>
		if (serialEventRun) serialEventRun();
 100:	20 97       	sbiw	r28, 0x00	; 0
 102:	e1 f3       	breq	.-8      	; 0xfc <main+0x10>
 104:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 108:	f9 cf       	rjmp	.-14     	; 0xfc <main+0x10>

0000010a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 124:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 128:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 12c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 130:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	23 0f       	add	r18, r19
 138:	2d 37       	cpi	r18, 0x7D	; 125
 13a:	20 f4       	brcc	.+8      	; 0x144 <__vector_16+0x3a>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	a1 1d       	adc	r26, r1
 140:	b1 1d       	adc	r27, r1
 142:	05 c0       	rjmp	.+10     	; 0x14e <__vector_16+0x44>
 144:	26 e8       	ldi	r18, 0x86	; 134
 146:	23 0f       	add	r18, r19
 148:	02 96       	adiw	r24, 0x02	; 2
 14a:	a1 1d       	adc	r26, r1
 14c:	b1 1d       	adc	r27, r1
 14e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 156:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 15a:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 15e:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 166:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 16a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 16e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	a1 1d       	adc	r26, r1
 176:	b1 1d       	adc	r27, r1
 178:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 17c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 180:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 184:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 19e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1a0:	84 b5       	in	r24, 0x24	; 36
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1a6:	84 b5       	in	r24, 0x24	; 36
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 1b2:	85 b5       	in	r24, 0x25	; 37
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 1c2:	e1 e8       	ldi	r30, 0x81	; 129
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 1d4:	e0 e8       	ldi	r30, 0x80	; 128
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 1de:	e1 eb       	ldi	r30, 0xB1	; 177
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 1e8:	e0 eb       	ldi	r30, 0xB0	; 176
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 1fc:	80 81       	ld	r24, Z
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 202:	80 81       	ld	r24, Z
 204:	81 60       	ori	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 20e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
